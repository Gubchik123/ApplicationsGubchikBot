from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from states.whitelist import Removing
from utils.user_manager import UserManager
from keyboards.whitelist import make_domains_keyboard

from .menu import handle_whitelist_menu


router = Router()


@router.message(F.text.lower() == "—Å–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω—ñ–≤")
async def handle_list_domains(message: Message, state: FSMContext):
    """Handles the list domains button."""
    user_data = await UserManager.get_user_data(user_id=message.from_user.id)

    if not (user_domains := user_data.get("whitelist", [])):
        await state.clear()
        await message.answer("üìã –í–∞—à –≤–∞–π—Ç–ª–∏—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return await handle_whitelist_menu(message)
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥–æ–º–µ–Ω, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:",
        reply_markup=await make_domains_keyboard(user_domains),
    )
    await state.set_state(Removing.domain)


@router.message(Removing.domain)
async def handle_domain_choice(message: Message, state: FSMContext):
    """Handles the domain choice."""
    if message.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é –≤–∞–π—Ç–ª–∏—Å—Ç–∞":
        await state.clear()
        return await handle_whitelist_menu(message)

    try:
        await UserManager.remove_domain_from_whitelist(
            user_id=message.from_user.id, domain=message.text
        )
    except ValueError:
        return await message.answer("‚ùå –î–æ–º–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤–∞—à–æ–º—É –≤–∞–π—Ç–ª–∏—Å—Ç—ñ.")
    await message.answer(f"‚úÖ –î–æ–º–µ–Ω {message.text} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –≤–∞–π—Ç–ª–∏—Å—Ç–∞.")
    await handle_list_domains(message, state)
